{"version":3,"sources":["components/Navigation/index.js","constants/routes.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/Button/index.js","components/Landing/index.js","components/SignUp/index.js","components/SignIn/index.js","components/PasswordForget/index.js","components/Home/index.js","components/Account/index.js","components/Admin/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","react_router_dom","to","FirebaseContext","React","createContext","firebaseConfig","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","Object","classCallCheck","this","app","initializeApp","Button","props","concat","extraClassName","onClick","action","name","Landing","components_Button","console","log","window","location","href","context","Consumer","firebase","SignUp","SignIn","PasswordForget","Home","version","Account","Admin","App","components_Navigation","react_router","exact","path","component","LandingPage","AccountPage","HomePage","SignUpPage","SignInPage","AdminPage","PasswordForgetPage","Boolean","hostname","match","ReactDOM","render","Provider","value","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oNA4BeA,EAxBI,WACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GCPO,WDOb,WAEFL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GCZO,KDYb,oBAEFL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GCZI,SDYV,SAEFL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GCdO,YDcb,WAEFL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GChBK,UDgBX,yBEnBKC,EADSC,IAAMC,cAAc,+BCCtCC,EAAiB,CACrBC,OAAQC,0CACRC,WAAYD,mCACZE,YAAaF,0CACbG,UAAWH,mBACXI,cAAeJ,+BACfK,kBAAmBL,gBACnBM,MAAON,wCCPMO,EDWb,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GACbI,IAAIC,cAAcd,IECPe,EAbA,SAAAC,GACb,OACEzB,EAAAC,EAAAC,cAAA,UACEC,UAAS,yBAAAuB,OACPD,EAAME,eAAiBF,EAAME,eAAiB,IAEhDC,QAASH,EAAMI,QAEdJ,EAAMK,OCwBEC,EA5BC,kBACd/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAC8B,EAAD,CACEF,KAAK,WACLD,OAAQ,WACNI,QAAQC,IAAI,YACZC,OAAOC,SAASC,KAAO,wBAG3BrC,EAAAC,EAAAC,cAAC8B,EAAD,CACEF,KAAK,iBACLD,OAAQ,WACNI,QAAQC,IAAI,mBAEdP,eAAe,cAGjB3B,EAAAC,EAAAC,cAACoC,EAAgBC,SAAjB,KACG,SAAAC,GACC,OACExC,EAAAC,EAAAC,cAAA,mECpBKuC,EANA,kBACbzC,EAAAC,EAAAC,cAAA,WACG,IACDF,EAAAC,EAAAC,cAAA,sBAAkB,MCGPwC,EANA,kBACb1C,EAAAC,EAAAC,cAAA,WACG,IACDF,EAAAC,EAAAC,cAAA,sBAAkB,MCGPyC,EANQ,kBACrB3C,EAAAC,EAAAC,cAAA,WACG,IACDF,EAAAC,EAAAC,cAAA,gCAA4B,MCIjB0C,EAPF,kBACX5C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kCAA0BK,IAAMsC,WCIrBC,EANC,kBACd9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBCGW6C,EAND,kBACZ/C,EAAAC,EAAAC,cAAA,WACG,IACDF,EAAAC,EAAAC,cAAA,qBAAiB,MC0BN8C,EAjBH,kBACVhD,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+C,EAAD,MADF,IACiBjD,EAAAC,EAAAC,cAAA,WACfF,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOC,OAAK,EAACC,KZjBI,IYiBkBC,UAAWC,IAC9CtD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOE,KZdU,WYcYC,UAAWE,IACxCvD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOE,KZhBO,QYgBYC,UAAWG,IACrCxD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOE,KZnBU,UYmBYC,UAAWI,IACxCzD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOE,KZnBU,UYmBYC,UAAWK,IACxC1D,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAOE,KZjBQ,SYiBYC,UAAWM,IACtC3D,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CACEE,KZlBuB,aYmBvBC,UAAWO,OCbCC,QACW,cAA7B1B,OAAOC,SAAS0B,UAEe,UAA7B3B,OAAOC,SAAS0B,UAEhB3B,OAAOC,SAAS0B,SAASC,MACvB,2DCXNC,IAASC,OACPjE,EAAAC,EAAAC,cAACoC,EAAgB4B,SAAjB,CAA0BC,MAAO,IAAIjD,GACnClB,EAAAC,EAAAC,cAACkE,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f3fc281e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\n\nconst Navigation = () => {\n  return (\n    <nav className=\"main-menu\">\n      <ul className=\"flex-row\">\n        <li>\n          <Link to={ROUTES.SIGN_IN}>Entrar</Link>\n        </li>\n        <li>\n          <Link to={ROUTES.LANDING}>¡Bienvenido!</Link>\n        </li>\n        <li>\n          <Link to={ROUTES.HOME}>Home</Link>\n        </li>\n        <li>\n          <Link to={ROUTES.ACCOUNT}>Cuenta</Link>\n        </li>\n        <li>\n          <Link to={ROUTES.ADMIN}>Administración</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","export const LANDING = '/';\nexport const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const HOME = '/home';\nexport const ACCOUNT = '/account';\nexport const ADMIN = '/admin';\nexport const PASSWORD_FORGET = '/pw-forget';\n","import React from 'react';\nconst FirebaseContext = React.createContext(null);\nexport default FirebaseContext;\n\n// createContext() crea 2 componentes:\n// 1. FirebaseContext.Provider: proveerá UNA INSTANCIA SOLO UNA VEZ de Firebase\n//     en el nivel más alto del árbol de componentes (ver src/index.js)\n// 2. FirebaseContext.Consumer trae la instancia de Firebase creada en el\n//     componente que la necesita\n","import app from 'firebase/app';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(firebaseConfig);\n  }\n}\nexport default Firebase;\n","import FirebaseContext from './context';\nimport Firebase from './firebase';\nexport default Firebase;\nexport { FirebaseContext };\n","import React from 'react';\n\nconst Button = props => {\n  return (\n    <button\n      className={`Button Button-primary ${\n        props.extraClassName ? props.extraClassName : ''\n      }`}\n      onClick={props.action}\n    >\n      {props.name}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport { FirebaseContext } from '../Firebase';\nimport Button from '../Button';\n// const SomeComponent = () => (\n\n// );\nconst Landing = () => (\n  <div>\n    <h1> Landing </h1>\n    <Button\n      name=\"A Button\"\n      action={() => {\n        console.log('a button');\n        window.location.href = 'https://google.com';\n      }}\n    />\n    <Button\n      name=\"Another Button\"\n      action={() => {\n        console.log('another button');\n      }}\n      extraClassName=\"other-btn\"\n    />\n\n    <FirebaseContext.Consumer>\n      {firebase => {\n        return (\n          <div>I ' ve access to Firebase and render something .</div>\n        );\n      }}\n    </FirebaseContext.Consumer>\n  </div>\n);\n\nexport default Landing;\n","import React from \"react\";\nconst SignUp = () => (\n  <div>\n    {\" \"}\n    <h1> SignUp </h1>{\" \"}\n  </div>\n);\nexport default SignUp;\n","import React from \"react\";\nconst SignIn = () => (\n  <div>\n    {\" \"}\n    <h1> SignIn </h1>{\" \"}\n  </div>\n);\nexport default SignIn;\n","import React from 'react';\nconst PasswordForget = () => (\n  <div>\n    {' '}\n    <h1> Forgot password? </h1>{' '}\n  </div>\n);\nexport default PasswordForget;\n","import React from 'react';\nconst Home = () => (\n  <div>\n    <h1> Home </h1>\n    <p>Currently using React {React.version}</p>\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\n\nconst Account = () => (\n  <div>\n    <h1>Account</h1>\n  </div>\n);\n\nexport default Account;\n","import React from \"react\";\nconst Admin = () => (\n  <div>\n    {\" \"}\n    <h1> Admin </h1>{\" \"}\n  </div>\n);\nexport default Admin;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Navigation from '../Navigation';\nimport LandingPage from '../Landing';\nimport SignUpPage from '../SignUp';\nimport SignInPage from '../SignIn';\nimport PasswordForgetPage from '../PasswordForget';\nimport HomePage from '../Home';\nimport AccountPage from '../Account';\nimport AdminPage from '../Admin';\n\nimport * as ROUTES from '../../constants/routes';\n\nconst App = () => (\n  <Router>\n    <div>\n      <Navigation /> <hr />\n      <Route exact path={ROUTES.LANDING} component={LandingPage} />\n      <Route path={ROUTES.ACCOUNT} component={AccountPage} />\n      <Route path={ROUTES.HOME} component={HomePage} />\n      <Route path={ROUTES.SIGN_UP} component={SignUpPage} />\n      <Route path={ROUTES.SIGN_IN} component={SignInPage} />\n      <Route path={ROUTES.ADMIN} component={AdminPage} />\n      <Route\n        path={ROUTES.PASSWORD_FORGET}\n        component={PasswordForgetPage}\n      />\n    </div>\n  </Router>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport Firebase, { FirebaseContext } from './components/Firebase';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <FirebaseContext.Provider value={new Firebase()}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}